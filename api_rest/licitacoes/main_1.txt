# https://teclado.com/fastapi-for-beginners/connect-fastapi-to-sql-database/

from typing import Any, List, Union
import databases
import sqlalchemy
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel


DATABASE_URL = "sqlite:///data.db"  # could come from an env var
database = databases.Database(DATABASE_URL)
metadata = sqlalchemy.MetaData()


# post_table IS NAME OF TABLE
post_table = sqlalchemy.Table(
    "posts",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("name", sqlalchemy.String),
    sqlalchemy.Column("description", sqlalchemy.String),
    sqlalchemy.Column("price", sqlalchemy.String),
    sqlalchemy.Column("tax", sqlalchemy.String),
    sqlalchemy.Column("tags", sqlalchemy.String)
)


ref_table = sqlalchemy.Table(
    "posts_ref",
    metadata,
    sqlalchemy.Column("id", sqlalchemy.Integer, primary_key=True),
    sqlalchemy.Column("body", sqlalchemy.String),
    sqlalchemy.Column("description", sqlalchemy.ForeignKey("posts.id"), nullable=False)
)



engine = sqlalchemy.create_engine(
    DATABASE_URL, connect_args={"check_same_thread": False}
)
metadata.create_all(engine)


app = FastAPI()

class Item(BaseModel):
    name: str
    description: Union[str, None] = None
    price: str
    tax: Union[str, None] = None
    tags: List[str] = []

# What return
class UserPost(BaseModel):
    id: int
    name: str
    description: Union[str, None] = None
    price: str
    tax: Union[str, None] = None
    tags: List[str] = []




class Item_Ref(BaseModel):
    body: Union[str, None] = None
    description: str


# What return
class UserPost_Ref(BaseModel):
    id: int
    body: Union[str, None] = None
    description: str



@app.post("/items", response_model=UserPost)
async def create_post(post: Item):
    tags_str = ",".join(post.tags)  # Convert list of tags to a comma-separated string
    query = post_table.insert().values(
        name=post.name,
        description=post.description,
        price=post.price,
        tax=post.tax,
        tags=tags_str  # Use the string representation of tags
    )
    last_record_id = await database.execute(query)
    return {**post.dict(), "id": last_record_id}


@app.get("/all", response_model=List[UserPost])
async def get_all_posts():
    query = post_table.select()
    result = await database.fetch_all(query)

    # Convert the result to a list of UserPost models
    posts = [
        UserPost(
            id=post['id'],
            name=post['name'],
            description=post['description'],
            price=post['price'],
            tax=post['tax'],
            tags=post['tags'].split(',') if post['tags'] else []
        )
        for post in result
    ]
    
    return posts


@app.get("/items/{item_id}", response_model=UserPost)
async def read_item(item_id: int):
    query = post_table.select().where(post_table.c.id == item_id)
    result = await database.fetch_one(query)

    if result is None:
        raise HTTPException(status_code=404, detail="Item not found")

    # Convert the result to a UserPost model
    item = UserPost(
        id=result['id'],
        name=result['name'],
        description=result['description'],
        price=result['price'],
        tax=result['tax'],
        tags=result['tags'].split(',') if result['tags'] else []
    )

    return item


###############################################################



@app.post("/items_ref", response_model=UserPost_Ref)
async def create_post(posts_ref: Item_Ref):
#    #tags_str = ",".join(posts_ref.tags)  # Convert list of tags to a comma-separated string
    query = ref_table.insert().values(
        body=posts_ref.body,
        description=posts_ref.description
    )
    last_record_id = await database.execute(query)
    return {**posts_ref.dict(), "id": last_record_id}



#@app.post("/items_ref", response_model=UserPost_Ref)
#async def create_post(posts_ref: Item_Ref):
#    query = ref_table.insert().values(
#        body=posts_ref.body,
#        description=posts_ref.description
#    )
#    last_record_id = await database.execute(query)

    # Construct the response model
#    response_model = UserPost_Ref(id=last_record_id, body=posts_ref.body, description=posts_ref.description)
#    return response_model





#db = []


#@app.post("/items/", status_code=201, response_model=Item)
#async def create_item(item: Item) -> Any:
#    db.append(item)
#    return item

#@app.post("/items", response_model=UserPost)
#async def create_post(post: Item):
#    query = post_table.insert().values(name=post.name, description=post.description, price=post.price, tax=post.tax, tags=post.tags )
#    last_record_id = await database.execute(query)
#    return {**post.dict(), "id": last_record_id}